#ifndef TEST_CPP
#define TEST_CPP

#include "test.h"

#define GREEN 2
#define BLUE 1
#define RED 4


void test_sha256() {

	int correct_hashes = 0;
	
	std::vector<std::string> strings_to_convert { 
		"Lorem ipsum dolor sit amet",
		"consectetur adipiscing elit",
		"sed do eiusmod tempor",
		"incididunt ut labore et dolore magna aliqua",
		"Ut enim ad minim veniam",
		"quis nostrud exercitation ullamco",
		"laboris nisi ut aliquip ex ea commodo consequat",
		"Duis aute irure dolor in reprehenderit",
		"in voluptate velit esse cillum dolore",
		"eu fugiat nulla pariatur",
		"Excepteur sint occaecat cupidatat",
		"non proident, sunt in culpa" 
	};

	std::vector<std::string> answer { 
		"16ABA5393AD72C0041F5600AD3C2C52EC437A2F0C7FC08FADFC3C0FE9641D7A3", 
		"B8614E0DE7706901F18252A8803CC32FFD335336E7358D3DA0952FD3CC212559",
		"4C6BC7AE4CC8686AA28BB3CDC11CF3C98B6644067250BF909DAF312C494FA933",
		"3B62DAE9E63E36744427A2342A4DBAC2995DFAAE84959D80459E1EEF071CB2AC",
		"D4581FB40745980A4641F356DA53C4BBFE55BEDDA4A49EEDBE746390A2656EE4",
		"CD45775798F654CFCCC5FAB4318FD26484E863FAE01211827BEBBF8222E8917C",
		"4B8490B54BD123EE90A2A66DAC9B3A9DF17DE1CF7A6DCA4FFF05A720C792AE2F",
		"844B9A3A07824F13AF57FB5025FB4CF71CBD9BBC78BCEEB93D322DB4D8FA2291",
		"B8B8CCD6A4CDE0E6BEBA16546220132C02CDAE75414AD997C7C372B0C5D96AAE",
		"7924636D8F4F0F925630D4512A94CCED16B9C56F290E7A6DC10F0E749516DF91",
		"3C365CCC08B4E82A976EFE6930516AD47792E2144BDBFF406B472FD6A2FEEFBA",
		"4BAFE659FA51E0E915F41EDC8A51D38224BD166CF77B2127C7D25A052613F3E4" 
	};



	HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);

	for (int i = 0; i < strings_to_convert.size(); ++i) {

		std::string hash_generated = sha256(strings_to_convert.at(i));
		std::for_each(hash_generated.begin(), hash_generated.end(), [](char & c) {
			c = std::toupper(c);
		});

		if (answer.at(i) == hash_generated) {
			
			SetConsoleTextAttribute(hConsole, BLUE);
			std::cout << "Expected: " << answer.at(i) << std::endl;

			SetConsoleTextAttribute(hConsole, GREEN);
			std::cout << "Received Correct: " << hash_generated << std::endl;

			correct_hashes++;
		}
		else {
			SetConsoleTextAttribute(hConsole, BLUE);
			std::cout << "Expected: " << answer.at(i) << std::endl;

			SetConsoleTextAttribute(hConsole, RED);
			std::cout << "Received Wrong: " << hash_generated << std::endl;
		}
	}

	if (correct_hashes == 12) {
		SetConsoleTextAttribute(hConsole, BLUE);
		std::cout << "---------------------------------------------------------------" << std::endl;
		SetConsoleTextAttribute(hConsole, GREEN);
		std::cout << "ALL sha256 TESTS PASSED" << std::endl;
		SetConsoleTextAttribute(hConsole, BLUE);
		std::cout << "---------------------------------------------------------------" << std::endl;

	}

};

void test_hex2binary() {
	int correct_binaries = 0;

	std::vector<std::string> hex_to_convert {
		"16ABA5393AD72C0041F5600AD3C2C52EC437A2F0C7FC08FADFC3C0FE9641D7A3",
		"B8614E0DE7706901F18252A8803CC32FFD335336E7358D3DA0952FD3CC212559",
		"4C6BC7AE4CC8686AA28BB3CDC11CF3C98B6644067250BF909DAF312C494FA933",
		"3B62DAE9E63E36744427A2342A4DBAC2995DFAAE84959D80459E1EEF071CB2AC",
		"D4581FB40745980A4641F356DA53C4BBFE55BEDDA4A49EEDBE746390A2656EE4",
		"CD45775798F654CFCCC5FAB4318FD26484E863FAE01211827BEBBF8222E8917C",
		"4B8490B54BD123EE90A2A66DAC9B3A9DF17DE1CF7A6DCA4FFF05A720C792AE2F",
		"844B9A3A07824F13AF57FB5025FB4CF71CBD9BBC78BCEEB93D322DB4D8FA2291",
		"B8B8CCD6A4CDE0E6BEBA16546220132C02CDAE75414AD997C7C372B0C5D96AAE",
		"7924636D8F4F0F925630D4512A94CCED16B9C56F290E7A6DC10F0E749516DF91",
		"3C365CCC08B4E82A976EFE6930516AD47792E2144BDBFF406B472FD6A2FEEFBA",
		"4BAFE659FA51E0E915F41EDC8A51D38224BD166CF77B2127C7D25A052613F3E4"
	};

	std::vector<std::string> answer {
		"0001011010101011101001010011100100111010110101110010110000000000010000011111010101100000000010101101001111000010110001010010111011000100001101111010001011110000110001111111110000001000111110101101111111000011110000001111111010010110010000011101011110100011",
		"1011100001100001010011100000110111100111011100000110100100000001111100011000001001010010101010001000000000111100110000110010111111111101001100110101001100110110111001110011010110001101001111011010000010010101001011111101001111001100001000010010010101011001",
		"0100110001101011110001111010111001001100110010000110100001101010101000101000101110110011110011011100000100011100111100111100100110001011011001100100010000000110011100100101000010111111100100001001110110101111001100010010110001001001010011111010100100110011",
		"0011101101100010110110101110100111100110001111100011011001110100010001000010011110100010001101000010101001001101101110101100001010011001010111011111101010101110100001001001010110011101100000000100010110011110000111101110111100000111000111001011001010101100",
		"1101010001011000000111111011010000000111010001011001100000001010010001100100000111110011010101101101101001010011110001001011101111111110010101011011111011011101101001001010010010011110111011011011111001110100011000111001000010100010011001010110111011100100",
		"1100110101000101011101110101011110011000111101100101010011001111110011001100010111111010101101000011000110001111110100100110010010000100111010000110001111111010111000000001001000010001100000100111101111101011101111111000001000100010111010001001000101111100",
		"0100101110000100100100001011010101001011110100010010001111101110100100001010001010100110011011011010110010011011001110101001110111110001011111011110000111001111011110100110110111001010010011111111111100000101101001110010000011000111100100101010111000101111",
		"1000010001001011100110100011101000000111100000100100111100010011101011110101011111111011010100000010010111111011010011001111011100011100101111011001101110111100011110001011110011101110101110010011110100110010001011011011010011011000111110100010001010010001",
		"1011100010111000110011001101011010100100110011011110000011100110101111101011101000010110010101000110001000100000000100110010110000000010110011011010111001110101010000010100101011011001100101111100011111000011011100101011000011000101110110010110101010101110",
		"0111100100100100011000110110110110001111010011110000111110010010010101100011000011010100010100010010101010010100110011001110110100010110101110011100010101101111001010010000111001111010011011011100000100001111000011100111010010010101000101101101111110010001",
		"0011110000110110010111001100110000001000101101001110100000101010100101110110111011111110011010010011000001010001011010101101010001110111100100101110001000010100010010111101101111111111010000000110101101000111001011111101011010100010111111101110111110111010",
		"0100101110101111111001100101100111111010010100011110000011101001000101011111010000011110110111001000101001010001110100111000001000100100101111010001011001101100111101110111101100100001001001111100011111010010010110100000010100100110000100111111001111100100"
	};

	HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);

	for (int i = 0; i < hex_to_convert.size(); ++i) {

		std::string binary_generated = hex2binary(hex_to_convert.at(i));

		if (answer.at(i) == binary_generated) {

			SetConsoleTextAttribute(hConsole, BLUE);
			std::cout << "Expected: " << answer.at(i) << std::endl;

			SetConsoleTextAttribute(hConsole, GREEN);
			std::cout << "Received Correct: " << binary_generated << std::endl;

			correct_binaries++;
		}
		else {
			SetConsoleTextAttribute(hConsole, BLUE);
			std::cout << "Expected: " << answer.at(i) << std::endl;

			SetConsoleTextAttribute(hConsole, RED);
			std::cout << "Received Wrong: " << binary_generated << std::endl;
		}
	}

	if (correct_binaries == 12) {
		SetConsoleTextAttribute(hConsole, BLUE);
		std::cout << "---------------------------------------------------------------" << std::endl;
		SetConsoleTextAttribute(hConsole, GREEN);
		std::cout << "ALL hex2binary TESTS PASSED" << std::endl;
		SetConsoleTextAttribute(hConsole, BLUE);
		std::cout << "---------------------------------------------------------------" << std::endl;

	}
}

void test_to_string() {
	int correct_strings = 0;

	std::vector<long long> num_to_convert {
		4516873546,
		54615415,
		16132041315,
		126512135,
		16510344,
		4321516542,
		1343215413632,
		21341341,
		123412423423,
		7347356426,
		132415564,
		14562561
	};

	std::vector<std::string> answer {
		"4516873546",
		"54615415",
		"16132041315",
		"126512135",
		"16510344",
		"4321516542",
		"1343215413632",
		"21341341",
		"123412423423",
		"7347356426",
		"132415564",
		"14562561"
	};

	HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);

	for (int i = 0; i < num_to_convert.size(); ++i) {

		std::string string_generated = to_string(num_to_convert.at(i));

		if (answer.at(i) == string_generated) {

			SetConsoleTextAttribute(hConsole, BLUE);
			std::cout << "Expected: " << answer.at(i) << std::endl;

			SetConsoleTextAttribute(hConsole, GREEN);
			std::cout << "Received Correct: " << string_generated << std::endl;

			correct_strings++;
		}
		else {
			SetConsoleTextAttribute(hConsole, BLUE);
			std::cout << "Expected: " << answer.at(i) << std::endl;

			SetConsoleTextAttribute(hConsole, RED);
			std::cout << "Received Wrong: " << string_generated << std::endl;
		}
	}

	if (correct_strings == 12) {
		SetConsoleTextAttribute(hConsole, BLUE);
		std::cout << "---------------------------------------------------------------" << std::endl;
		SetConsoleTextAttribute(hConsole, GREEN);
		std::cout << "ALL to_string TESTS PASSED" << std::endl;
		SetConsoleTextAttribute(hConsole, BLUE);
		std::cout << "---------------------------------------------------------------" << std::endl;

	}
}

void test_checking4proof() {
	int correct_checks = 0;

	std::vector<std::string> binaries_to_check {
		"0001011010101011101001010011100100111010110101110010110000000000010000011111010101100000000010101101001111000010110001010010111011000100001101111010001011110000110001111111110000001000111110101101111111000011110000001111111010010110010000011101011110100011",
		"1011100001100001010011100000110111100111011100000110100100000001111100011000001001010010101010001000000000111100110000110010111111111101001100110101001100110110111001110011010110001101001111011010000010010101001011111101001111001100001000010010010101011001",
		"0100110001101011110001111010111001001100110010000110100001101010101000101000101110110011110011011100000100011100111100111100100110001011011001100100010000000110011100100101000010111111100100001001110110101111001100010010110001001001010011111010100100110011",
		"0011101101100010110110101110100111100110001111100011011001110100010001000010011110100010001101000010101001001101101110101100001010011001010111011111101010101110100001001001010110011101100000000100010110011110000111101110111100000111000111001011001010101100",
		"1101010001011000000111111011010000000111010001011001100000001010010001100100000111110011010101101101101001010011110001001011101111111110010101011011111011011101101001001010010010011110111011011011111001110100011000111001000010100010011001010110111011100100",
		"1100110101000101011101110101011110011000111101100101010011001111110011001100010111111010101101000011000110001111110100100110010010000100111010000110001111111010111000000001001000010001100000100111101111101011101111111000001000100010111010001001000101111100",
		"0100101110000100100100001011010101001011110100010010001111101110100100001010001010100110011011011010110010011011001110101001110111110001011111011110000111001111011110100110110111001010010011111111111100000101101001110010000011000111100100101010111000101111",
		"1000010001001011100110100011101000000111100000100100111100010011101011110101011111111011010100000010010111111011010011001111011100011100101111011001101110111100011110001011110011101110101110010011110100110010001011011011010011011000111110100010001010010001",
		"1011100010111000110011001101011010100100110011011110000011100110101111101011101000010110010101000110001000100000000100110010110000000010110011011010111001110101010000010100101011011001100101111100011111000011011100101011000011000101110110010110101010101110",
		"0111100100100100011000110110110110001111010011110000111110010010010101100011000011010100010100010010101010010100110011001110110100010110101110011100010101101111001010010000111001111010011011011100000100001111000011100111010010010101000101101101111110010001",
		"0011110000110110010111001100110000001000101101001110100000101010100101110110111011111110011010010011000001010001011010101101010001110111100100101110001000010100010010111101101111111111010000000110101101000111001011111101011010100010111111101110111110111010",
		"0100101110101111111001100101100111111010010100011110000011101001000101011111010000011110110111001000101001010001110100111000001000100100101111010001011001101100111101110111101100100001001001111100011111010010010110100000010100100110000100111111001111100100"
	};

	std::vector<bool> answer {
		false,
		true,
		true,
		false,
		true,
		true,
		true,
		true,
		true,
		true,
		false,
		true
	};

	HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);

	for (int i = 0; i < binaries_to_check.size(); ++i) {

		bool check_result = checking4proof(binaries_to_check.at(i), 2);

		if (answer.at(i) == check_result) {

			SetConsoleTextAttribute(hConsole, BLUE);
			std::cout << "Expected: " << answer.at(i) << std::endl;

			SetConsoleTextAttribute(hConsole, GREEN);
			std::cout << "Received Correct: " << check_result << std::endl;

			correct_checks++;
		}
		else {
			SetConsoleTextAttribute(hConsole, BLUE);
			std::cout << "Expected: " << answer.at(i) << std::endl;

			SetConsoleTextAttribute(hConsole, RED);
			std::cout << "Received Wrong: " << check_result << std::endl;
		}
	}

	if (correct_checks == 12) {
		SetConsoleTextAttribute(hConsole, BLUE);
		std::cout << "---------------------------------------------------------------" << std::endl;
		SetConsoleTextAttribute(hConsole, GREEN);
		std::cout << "ALL checking4proof TESTS PASSED" << std::endl;
		SetConsoleTextAttribute(hConsole, BLUE);
		std::cout << "---------------------------------------------------------------" << std::endl;

	}
}



#endif  //TEST_CPP